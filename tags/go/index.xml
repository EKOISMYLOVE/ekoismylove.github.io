<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>go - Tag - Wei's Note</title><link>http://example.org/tags/go/</link><description>go - Tag - Wei's Note</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 26 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://example.org/tags/go/" rel="self" type="application/rss+xml"/><item><title>Golang - 函式(Functions)</title><link>http://example.org/posts/go/go_note5/</link><pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate><author>Author</author><guid>http://example.org/posts/go/go_note5/</guid><description>&lt;p>本篇文章會說明如何使用 golang 撰寫函式，瞭解傳入值與返回值，介紹匿名函式與defer，並瞭解可以對函式所做的事情。&lt;/p></description></item><item><title>Golang - 代碼塊、陰影與控制結構(Code Blocks, Shadows, and Control Structures)</title><link>http://example.org/posts/go/go_note4/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><author>Author</author><guid>http://example.org/posts/go/go_note4/</guid><description>&lt;p>本篇文章將介紹 Block 與 Shadows，接著會說明控制結構（if、for、goto）等。&lt;/p></description></item><item><title>Golang - 複合類型 (Composite Types)</title><link>http://example.org/posts/go/go_note3/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><author>Author</author><guid>http://example.org/posts/go/go_note3/</guid><description>&lt;p>本篇文章基本上是介紹 Go 的複合類型（Array, Slice, Map）與內置函式，另外會簡單介紹 struct。&lt;/p></description></item><item><title>Golang - 類型與聲明 (Types and Declarations)</title><link>http://example.org/posts/go/go_note2/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><author>Author</author><guid>http://example.org/posts/go/go_note2/</guid><description>&lt;p>本篇文章將介紹類型與聲明，基本上接觸過程式語言的話，許多部份是相似的，僅有少處不同。&lt;/p>
&lt;p>如同其他的程式語言，Golang 也有許多與相同的類型：Boolean、Integer、Float與String，後續會分別介紹不同的類型。&lt;/p></description></item><item><title>Golang - 環境建置 (Environment)</title><link>http://example.org/posts/go/go_note1/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>http://example.org/posts/go/go_note1/</guid><description>&lt;p>本篇基本上是說明golang的環境建置，編譯，環境先建置好，後續才能進行開發。另外會再提到一些程式碼的品質工具等。基本上在開發時都希望程式碼能具有較好的品質與一致的規範，降低後續維護的成本。&lt;/p></description></item></channel></rss>